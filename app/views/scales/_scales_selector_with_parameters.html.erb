<%
  obj = "#{object.class.name.underscore}"
  selected ||= object.scales
  intro ||= "The following #{t('scale').pluralize} are associated with this #{t('model')}:"
  button_text ||= "Associate with this #{t('model')}"
  existing_json = associations_json_from_scales(object, selected)
%>

<%= folding_panel("#{t('scale').pluralize}", false, id: 'add_scales_form',
                  body_options: { id: 'add_scales_form_fold_content' },
                  help_text: "Here you can associate the #{t('model')} with specific #{t('scale').pluralize}") do %>
  <p style="color: #666666;">
    <%= intro %>
  </p>

  <%= hidden_field_tag "#{obj}[scales][]", "" %>
  <%= hidden_field_tag "#{obj}[scale_extra_params][]", "" %>
  <%= associations_list('scale_list', 'associations/scale', existing_json, 'data-field-name' => obj, blank_field: false, empty_text: 'None') %>
  <div class="association_step row">
    <div class="col-sm-4">
      <%= select_tag 'possible_scale_ids',
                     options_for_select(Scale.all.collect { |o| [truncate(o.title, length: 120), o.id] }),
                     class: 'form-control', prompt: 'Select scale...', autocomplete: 'off' -%>
    </div>
    <%# This ensures that the parameter is always sent, even when nothing is selected.
        It adds a "" as the first item in the array. So if items 1,2, and 3 are selected the
        value of the parameter will be ["","1","2","3"]. This is compatible with the rails
        association association_ids= methods, which reject 'blank' values automatically.%>
    <div id='additional_scale_details' class="col-sm-8 form-inline" style="display:none;" >
      Param name: <%= text_field_tag nil, '', id: 'choose_parameter_for_scale_id', class: 'form-control', autocomplete: 'off' -%>
      Unit: <%= text_field_tag nil, '', id: 'choose_unit_for_scale_id' , class: 'form-control', autocomplete: 'off' -%>
    </div>
  </div>

  <br/>
  <%= button_link_to(button_text, 'new', '#', id: 'add-scale-btn') %>
<% end %>

<script type="text/javascript">
    $j('#possible_scale_ids').change(function () {
        if ($j(this).val()) {
            $j('#additional_scale_details').show();
            $j('#add-scale-btn').show();
        } else {
            $j('#additional_scale_details').hide();
            $j('#add-scale-btn').hide();
        }
    });

    $j('#add-scale-btn').click(function () {
        var list = $j('#scale_list').data('associationList');
        var param = $j('#choose_parameter_for_scale_id').val();
        var unit = $j('#choose_unit_for_scale_id').val();
        var selectedOption = $j('#possible_scale_ids option:selected');
        if (!selectedOption.val())
            return false;

        var item = { id: parseInt(selectedOption.val()),
                     title: selectedOption.text() };
        if (param) {
            item.extraParams = { param: param, unit: unit, scale_id: item.id };
            item.extraParams.stringified = JSON.stringify(item.extraParams);
        }

        var existing = list.find(function (s) { return s.id === item.id && (!param || (s.extraParams && (s.extraParams.param === param))) });
        if (!existing) {
            list.add(item);
            $j('#possible_scale_ids').val('');
            $j('#choose_parameter_for_scale_id').val('');
            $j('#choose_unit_for_scale_id').val('');
        } else {
            existing.element.highlight('blue');
        }

        return false;
    });
</script>
